---

- name: Extract Node and VM ID for VM {{ item }}
  set_fact:
#    vm_id: "{{ proxmox_cluster_information.json.data | selectattr('name', 'equalto', item) | map(attribute='vmid') | first }}"
#    vm_node: "{{ proxmox_cluster_information.json.data | selectattr('name', 'equalto', item) | map(attribute='node') | first }}"
    vm_id: "{{ proxmox_cluster_information.json.data | selectattr('name', 'equalto', item) | map(attribute='vmid') | first }}"
    vm_node: "{{ proxmox_cluster_information.json.data | selectattr('name', 'equalto', item) | map(attribute='node') | first }}"


- name: Get VM Status
  uri:
    method: GET
    validate_certs: no
    url: "https://{{ proxmox_api_host }}:8006/api2/json/nodes/{{ vm_node }}/qemu/{{ vm_id }}/status/current"
    headers: "{{ proxmox_api_cookie }}"
  register: vm_status

- debug:
    msg: "{{ vm_status }}"

- name: Start VM
  uri:
    method: POST
    validate_certs: no
    url: "https://{{ proxmox_api_host }}:8006/api2/json/nodes/{{ vm_node }}/qemu/{{ vm_id }}/status/start"
    headers: "{{ proxmox_api_cookie }}"
    body_format: form-urlencoded
    body:
      timeout: 300
  when: vm_status.json.data.status == 'stopped'

- name: Waiting for the VM to boot up
  pause: 
    seconds: 300
  when: vm_status.json.data.status == 'stopped'

- name: Update VM {{ item }}
  apt:
    force_apt_get: yes
    name: "*"
    state: latest
    update_cache: yes
  become: yes
  delegate_to: "{{ item }}"

- name: Shutdown VM {{ item }} when it was stopped before patching
  uri:
    method: POST
    validate_certs: no
    url: "https://{{ proxmox_api_host }}:8006/api2/json/nodes/{{ vm_node }}/qemu/{{ vm_id }}/status/shutdown"
    headers: "{{ proxmox_api_cookie }}"
    body_format: form-urlencoded
    body:
      forceStop: true
  when: vm_status.json.data.status == 'stopped'